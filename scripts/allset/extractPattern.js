const { trim } = require('../scriptUtils');

const AUTOGEN_COMMENT = trim(`
/* --- AUTOGENERATED FILE -----------------------------
* If you make changes to this file delete this comment.
* Otherwise the file may be overwritten in the future.
* --------------------------------------------------- */
`);

const formatStr = str =>
  JSON.stringify(trim(str))
    .replace(/\\"/g, '"')
    .replace(/'/g, "\\'")
    .replace(/^"|"$/g, '');

const getExamplesString = exampleFields => {
  const strings = exampleFields.map(field =>
    trim(`
    {
      zh: '${formatStr(field.zh)}',
      en: '${formatStr(field.en)}',
      src: allSetSrc,
    },
  `)
  );
  return strings.join('\n    ');
};

module.exports = fields => {
  const { matcherId, name, examples, description, url, regexes } = fields;

  const fullPatternName = `${matcherId}Pattern`;

  const matchRegexStrings = regexes.map(regex => `regexMatchLocs(text, ${regex}),`);
  const matchString = trim(`
    const text = sentence.original;
    return mergeLocMatchGroups([
      ${matchRegexStrings.join('\n      ')}
    ]);
  `);

  const examplesString = getExamplesString(examples);

  const mainTemplate = `
${AUTOGEN_COMMENT}

const { regexMatchLocs } = require('../lib/matching/regexMatch');
const { mergeLocMatchGroups } = require('../lib/matching/utils');

const allSetSrc = {
  type: 'website',
  url: '${formatStr(url)}',
  name: 'AllSet Chinese Grammar Wiki',
};


module.exports = {
  id: '${formatStr(matcherId)}',
  name: '${formatStr(name)}',
  description: '${formatStr(trim(description))}',
  sources: [
    allSetSrc,
  ],
  match: (sentence) => {
    ${trim(matchString)}
  },
  examples: [
    ${trim(examplesString)}
  ],
};
  `;

  const testTemplate = `
${AUTOGEN_COMMENT}

const ${fullPatternName} = require('./${fullPatternName}');
const {
  assertAllExamplesMatch,
  assertNoneMatch,
} = require('../lib/testUtils');

test('matches all examples', async () => {
  await assertAllExamplesMatch(${fullPatternName});
});

// TODO: Add more tests

test("doesn't match negative examples", async () => {
  await assertNoneMatch(${fullPatternName}, [
    // TODO: add negative examples here
  ]);
});
  `;

  return {
    fullPatternName,
    mainTemplate,
    testTemplate,
  };
};
